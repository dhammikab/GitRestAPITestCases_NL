<html>
<META http-equiv="content-type" content="text/html; charset=utf-8">

<body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-drilldown vertical menu off-canvas-list" data-drilldown="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-drilldown-submenu-parent" data-mc-css-tree-node-collapsed="is-drilldown-submenu-parent" data-mc-css-sub-menu="vertical menu slide-in-right is-drilldown-submenu" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="True" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.drilldown" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div>
                        <nav class="title-bar tab-bar" role="banner" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Ga naar hoofdinhoud</a><div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <div class="central-account-wrapper">
                                        <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Rekening</span></a><div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Instellingen</a><hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Afmelden</a></div>
                                        </div>
                                    </div>
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span></button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../../-/-/-/welcome_page.htm" alt="Logo"></a></div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="2" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>tijdelijke aanduiding</a></li>
                                    </ul>
                                </div>
                                <div class="central-account-wrapper">
                                    <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Rekening</span></a><div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Instellingen</a><hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Afmelden</a></div>
                                    </div>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filteren:</span><div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="Alle bestanden" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">Alle bestanden</span></button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Zoeken" role="button" tabindex="0"><span class="invisible-label">Zoekopdracht verzenden</span></div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <div class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="content">
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div role="navigation" aria-label="Topic toolbar buttons" class="sideContent">
                                                    <div class="clearfix">
                                                        <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent" style="mc-topic-toolbar-items: ;">
                                                            <div class="button-group-container-left">
                                                                <button class="button needs-pie previous-topic-button" title="Hiermee navigeert u naar vorige" disabled="true">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Navigate previous">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                                <button class="button needs-pie next-topic-button" title="Navigeer naar volgende" disabled="true">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Navigate next">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                                <button class="button needs-pie print-button" title="Afdrukken">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Print">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                                <button class="button needs-pie select-language-button" title="Taal wijzigen">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Change language">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <ul class="nocontent menu _Skins_SideMenu mc-component" data-mc-is-context-sensitive="True" data-mc-linked-toc="Data/Tocs/Brightspace_Help_TOC.js" data-mc-side-menu="True" data-mc-max-depth="1" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="False" data-mc-include-parent="True" data-mc-toc="True">
                                                    </ul>
                                                </div>
                                                <div class="nocontent">
                                                    <div class="MCBreadcrumbsBox_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">U bent hier:</span></div>
                                                </div>
                                                <div role="main" id="mc-main-content">
                                                    <h1>Een opdracht verzenden</h1>
                                                    <p>Met de tool Opdrachten kunt u opdrachten indienen in de Brightspace Learning Environment, zodat u uw werk niet meer hoeft te mailen, faxen of per e-mail naar instructeurs hoeft te verzenden. Upload uw inzending naar de juiste opdracht en verzend deze.</p>
                                                    <h2>Vervaldatums en einddatums begrijpen</h2>
                                                    <p class="bodytext">Een deadline is de deadline voor het indienen van een opdracht in je cursus. Deze datum is alleen specifiek voor opdrachten.</p>
                                                    <p class="bodytext">Einddatums worden aan opdrachten gekoppeld. De einddatum is de einddatum waarop een opdracht kan worden ingediend, ongeacht de vervaldatum. Als de einddatum van de opdracht voorbij is, kunt u de opdracht niet meer indienen, ongeacht de vervaldatum van de opdracht.</p>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="#" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage" aria-expanded="false"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Weergeven" data-mc-alt2="Hide" />Om opdrachten in te dienen</a></span><div class="MCDropDownBody dropDownBody">
                                                            <ol class="step">
                                                                <li class="step" value="1">Klik op de navigatiebalk op <span class="uicontrol">Opdrachten</span>.</li>
                                                                <li class="step" value="2">Klik op de <span class="uicontrol">pagina Opdrachten </span>op de opdracht waaraan u wilt verzenden.</li>
                                                                <li value="3">
                                                                    <p>Volg de instructies voor de toewijzing en voer een van de volgende handelingen uit:</p>
                                                                </li>
                                                                <ul>
                                                                    <li>
                                                                        <p>Typ uw opdracht rechtstreeks in het <b>veld Tekst verzenden</b> . Wanneer u klaar bent met uw schriftelijke antwoord, klikt u op <b>Verzenden</b>.</p>
                                                                    </li>
                                                                    <li class="step">Als u naar het bestand wilt bladeren dat u wilt verzenden, klikt u op <span class="uicontrol">een bestand toevoegen</span>. U kunt bestanden bijvoegen van uw lokale computer of opslagapparaat, een persoonlijke kluis, een groepskluisje of Brightspace Eportfolio. Voer eventuele opmerkingen in die u met het bestand wilt verzenden. Klik op <b>Verzenden</b>.</li>
                                                                    <li class="step">U kunt <span class="uicontrol">Audio opnemen</span> selecteren om feedback toe te voegen. Wanneer u klaar bent met een opname, klikt u op<span class="uicontrol"> Toevoegen</span>. Voer eventuele opmerkingen in die u met het bestand wilt verzenden. Klik op <b>Verzenden</b>.</li>
                                                                    <li class="step">Klik op <b>markeren als voltooid</b> om een opdracht handmatig als voltooid te markeren.</li>
                                                                </ul>
                                                                <li class="step" value="4">Als uw instructeur feedback over e-rater ® grammatica heeft ingeschakeld, klikt u op de pagina Indieningsgeschiedenis op de koppeling Feedback over e-rater® grammatica weergeven in de kolom Inline feedback om de feedback over de grammatica van uw opdracht te bekijken <b></b> <b></b> <b></b> .<ul><li class="step">Als uw opdracht meerdere inzendingen toestaat, kunt u eventuele grammatica-feedback opnemen en uw opdracht opnieuw indienen.</li></ul></li>
                                                            </ol>
                                                            <p class="step"><b>Opmerkingen:</b></p>
                                                            <ul>
                                                                <li>Als de toewijzing Turnitin is ingeschakeld, wordt het bestand dat u hebt ingediend vooraf gevalideerd op het moment dat het wordt ingediend om te garanderen dat het bestand binnen de vereisten voor het bestandstype en de grootte van Turnitin valt.</li>
                                                                <li>Als GradeMark of de OriginalityCheck is ingeschakeld, kunt u uw <b>inzending-ID</b> bekijken op de <b>pagina Inzendingsgeschiedenis</b> .</li>
                                                                <li>Afhankelijk van uw cursusinstellingen kunt u mogelijk alle rubrica bekijken die worden gebruikt om uw werk direct op de inzending pagina te evalueren.</li>
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div role="contentinfo" aria-label="D2L legal and trademark information" class="footer center">
                                                    <div class="HomeMasterPageFooter outer-row">
                                                        <div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 8pt;">Tot de D2L-bedrijvenfamilie behoren D2L Corporation, D2L Ltd, D2L Australia Pty Ltd, D2L Europe Ltd, D2L Asia Pte Ltd en D2L Brasil Solu&ccedil;&ouml;es de Tecnologia para Educ&atilde;o Ltda.<br />© 1999-2022 D2L Corporation.<br /><span style="font-size: 10pt;"><span style="font-size: 8pt;">Brightspace, D2L en andere merken (&bdquo;D2L-merken&rdquo;) zijn handelsmerken van D2L Corporation, geregistreerd in de Verenigde Staten en andere landen. Ga naar </span><a href="http://www.d2l.com/trademarks" style="font-size: 8pt;">www.d2l.com/trademarks</a><span style="font-size: 8pt;"> voor een lijst met andere D2L-markeringen.</span></span></div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div><a data-close="true"></a></div>
            </div>
        </div>
    </body>
</html>

